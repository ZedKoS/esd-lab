i   : bitv(10)                      # REG
acc : bitv(5+7+1) = bitv(13)        # REG
p : bitv(10) # 3 bit meno di acc    # SIGNAL
check : bit                         # SIGNAL
W : reg(7) := if i = 0 then 0 else E[i-1]

start:
    acc <- 0

if turn = 1 goto turn 1

# -- turn = 0: a = 14/8, b = 18/8 -- #
turn0:
    # a: *14 = 16-2
    acc <- acc + 16*W
    acc <- acc -  2*W

    W <- E[i]

    # b: *18 = 16+2
    acc <- acc + 16*W
    acc <- acc +  2*W

goto calc_power

# -- turn = 1: a = 7/8, b = 10/8 -- #
turn1:
    # a: *7 = 8-1
    acc <- acc + 8*W
    acc <- acc -   W

    W <- E[i]

    # b: *10 = 8+2
    acc <- acc + 8*W
    acc <- acc + 2*W

calc_power:
    # p <- acc / 8
    p <- acc[3..]

    # gli ultimi 3 bit (2 extra + segno) devono essere uguali
    # p.([9] == [8] == [7])
    # check <- p[9] = p[8] = [7]
    check <- (not (p[9] xor p[7])) and (not (p[8] xor p[7]))

    if check goto no_alarm
alarm:
    POWER_ALARM <- 1
    POWER[7] = p[7]
    POWER[0..=6] = (others => not p[7])
    
    goto inc_i

no_alarm:
    POWER <- p[0..=7]

end:
